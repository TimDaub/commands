#!/bin/bash

# There's cases where even `git reflog` can't help you anymore. E.g. when you've
# `git reset --hard` some uncommitted changes. In this case, there may, however,
# be a slight chance that you can recover lost data in form of a commit using:

git fsck --lost-found
# Via: https://stackoverflow.com/a/6780036

# Sometimes you commit private credentials to GitHub. To censor them, use the
# following filter-branch
git filter-branch --tree-filter \
    "find . -name '*.js' -exec sed -i -e \'s/to-remove/replaced-with-this/g' {} \;"

# To remove an entire file, replace PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA with
# the file in your git repository source:
# https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository
git filter-branch --force --index-filter \
    "git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA" \
    --prune-empty --tag-name-filter cat -- --all

# Turns out git aliases are amazing.
# Docs are here: https://git-scm.com/book/tr/v2/Git-Basics-Git-Aliases
#
# Especially, when working with npm, `package-lock.json` can be annoying when
# you're trying to check the changed files using `git diff`. Of course, creating
# a global alias would now be an option. But I prefer having a git-specific
# alias. To ignore both `package-lock.json` and `yarn.lock` with `git cdiff`,
# do:
git config --global alias.cdiff 'diff -- ":!package-lock.json" ":!yarn.lock"'

# Recently, GitHub changed the default branch name from "master" to "main". To
# also initialize a main branch with `git init`, it can be configured as
# follows:

git config --global init.defaultBranch main

# To generate a tag simply do:
git tag <tag_name>

# To delete a LOCAL tag
git tag --delete tagname

# and to delete a REMOTE tag
git push --delete origin tagname
